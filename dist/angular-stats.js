!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("angular")):"function"==typeof define&&define.amd?define(["angular"],e):"object"==typeof exports?exports.AngularStats=e(require("angular")):t.AngularStats=e(t.angular)}(self,t=>(()=>{"use strict";var e={526:e=>{e.exports=t}},n={};function o(t){var s=n[t];if(void 0!==s)return s.exports;var i=n[t]={exports:{}};return e[t](i,i.exports,o),i.exports}o.d=(t,e)=>{for(var n in e)o.o(e,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var s={};o.r(s),o.d(s,{AngularStats:()=>r,angularStats:()=>a});var i=o(526);class r{rootScope;document;window;timeout;logger;static $inject=["$rootScope","$document","$window","$timeout","$log"];scopesList;watchersList;componentsInfo;domElementsCount;nodeNameList;startingElement;digestInfo={duration:"0"};constructor(t,e,n,o,s){this.rootScope=t,this.document=e,this.window=n,this.timeout=o,this.logger=s,this.startingElement=this.document.find("app")}setStartingElement(t){this.startingElement=t}analyzeWebApp(){if(this.scopesList=[],this.watchersList=[],this.componentsInfo={},this.domElementsCount=0,this.nodeNameList={},!this.startingElement||0===this.startingElement.length)throw Error(this.startingElement+" is not a valid selector");return this.analizeScope(this.rootScope),this.detectFromElement(this.startingElement),this.calculateDigestDuration(),this.composeMessage()}composeMessage(){try{let t="GENERAL\n";t+="----------------------\n",t+="Tot scopes: "+this.scopesList.length+"\n",t+="Tot watchers: "+this.watchersList.length+"\n",t+="Tot DOM Elements: "+this.domElementsCount+"\n",t+="Digest duration: "+this.digestInfo.duration+" ms \n\n",t+="\nCOMPONENTS\n",t+="----------------------\n";for(const e in this.componentsInfo)t+="- "+e+"\ns: "+this.componentsInfo[e].scopesCount+", w: "+this.componentsInfo[e].watchers.length+"\n";t+="\n\nHTMLElement\n",t+="----------------------\n";for(const e in this.nodeNameList)t+=e+": "+this.nodeNameList[e]+"\n";return t}catch(t){return this.logger.error(t),"Error"}}analizeScope(t){try{if(-1===this.scopesList.indexOf(t)){this.scopesList.push(t);const e=t.$ctrl?t.$ctrl.name:t.name?t.name:"Unknown";void 0===this.componentsInfo[e]?this.componentsInfo[e]={name:e,scopesCount:1,watchers:[]}:this.componentsInfo[e].scopesCount++,i.forEach(t.$$watchers,t=>{-1===this.watchersList.indexOf(t)&&this.watchersList.push(t),-1===this.componentsInfo[e].watchers.indexOf(t)&&this.componentsInfo[e].watchers.push(t)}),t.$$childHead&&this.analizeScope(t.$$childHead),t.$$childTail&&this.analizeScope(t.$$childTail),t.$$prevSibling&&this.analizeScope(t.$$prevSibling),t.$$nextSibling&&this.analizeScope(t.$$nextSibling)}}catch(t){this.logger.error(t)}}detectFromElement(t){try{this.domElementsCount++,i.element(t).scope()&&this.analizeScope(i.element(t).scope()),i.forEach(i.element(t).children(),t=>{void 0===this.nodeNameList[t.nodeName]?this.nodeNameList[t.nodeName]=1:this.nodeNameList[t.nodeName]++,this.detectFromElement(i.element(t))})}catch(t){this.logger.error(t)}}calculateDigestDuration(){var t=this;try{let e=0;const n=Object.getPrototypeOf(this.rootScope),o=n.$digest;n.$digest=function(){const n=t.getTime();for(var s=arguments.length,i=new Array(s),r=0;r<s;r++)i[r]=arguments[r];o.apply(t.rootScope,i),e=t.getTime()-n,t.digestInfo.duration=e.toFixed(2)}}catch(t){this.logger.error(t)}}getTime(){return performance?performance.now():this.getDate().getTime()}getDate(){return new Date}}const a=i.module("angular-stats",[]).service("AngularStats",r).name;return s})());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
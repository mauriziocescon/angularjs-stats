!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("angular")):"function"==typeof define&&define.amd?define(["angular"],e):"object"==typeof exports?exports.AngularStats=e(require("angular")):t.AngularStats=e(t.angular)}(self,t=>(()=>{"use strict";var e={526:e=>{e.exports=t}},o={};function n(t){var i=o[t];if(void 0!==i)return i.exports;var s=o[t]={exports:{}};return e[t](s,s.exports,n),s.exports}n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};n.r(i),n.d(i,{AngularStats:()=>a,angularStats:()=>c});var s=n(526);function r(t,e,o){return(e=function(t){var e=function(t){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var o=e.call(t,"string");if("object"!=typeof o)return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==typeof e?e:e+""}(e))in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}class a{constructor(t,e,o,n,i){r(this,"rootScope",void 0),r(this,"document",void 0),r(this,"window",void 0),r(this,"timeout",void 0),r(this,"logger",void 0),r(this,"scopesList",void 0),r(this,"watchersList",void 0),r(this,"componentsInfo",void 0),r(this,"domElementsCount",void 0),r(this,"nodeNameList",void 0),r(this,"startingElement",void 0),r(this,"digestInfo",{duration:"0"}),this.rootScope=t,this.document=e,this.window=o,this.timeout=n,this.logger=i,this.startingElement=this.document.find("app")}setStartingElement(t){this.startingElement=t}analyzeWebApp(){if(this.scopesList=[],this.watchersList=[],this.componentsInfo={},this.domElementsCount=0,this.nodeNameList={},!this.startingElement||0===this.startingElement.length)throw Error(this.startingElement+" is not a valid selector");return this.analizeScope(this.rootScope),this.detectFromElement(this.startingElement),this.calculateDigestDuration(),this.composeMessage()}composeMessage(){try{let t="GENERAL\n";t+="----------------------\n",t+="Tot scopes: "+this.scopesList.length+"\n",t+="Tot watchers: "+this.watchersList.length+"\n",t+="Tot DOM Elements: "+this.domElementsCount+"\n",t+="Digest duration: "+this.digestInfo.duration+" ms \n\n",t+="\nCOMPONENTS\n",t+="----------------------\n";for(const e in this.componentsInfo)t+="- "+e+"\ns: "+this.componentsInfo[e].scopesCount+", w: "+this.componentsInfo[e].watchers.length+"\n";t+="\n\nHTMLElement\n",t+="----------------------\n";for(const e in this.nodeNameList)t+=e+": "+this.nodeNameList[e]+"\n";return t}catch(t){return this.logger.error(t),"Error"}}analizeScope(t){try{if(-1===this.scopesList.indexOf(t)){this.scopesList.push(t);const e=t.$ctrl?t.$ctrl.name:t.name?t.name:"Unknown";void 0===this.componentsInfo[e]?this.componentsInfo[e]={name:e,scopesCount:1,watchers:[]}:this.componentsInfo[e].scopesCount++,s.forEach(t.$$watchers,t=>{-1===this.watchersList.indexOf(t)&&this.watchersList.push(t),-1===this.componentsInfo[e].watchers.indexOf(t)&&this.componentsInfo[e].watchers.push(t)}),t.$$childHead&&this.analizeScope(t.$$childHead),t.$$childTail&&this.analizeScope(t.$$childTail),t.$$prevSibling&&this.analizeScope(t.$$prevSibling),t.$$nextSibling&&this.analizeScope(t.$$nextSibling)}}catch(t){this.logger.error(t)}}detectFromElement(t){try{this.domElementsCount++,s.element(t).scope()&&this.analizeScope(s.element(t).scope()),s.forEach(s.element(t).children(),t=>{void 0===this.nodeNameList[t.nodeName]?this.nodeNameList[t.nodeName]=1:this.nodeNameList[t.nodeName]++,this.detectFromElement(s.element(t))})}catch(t){this.logger.error(t)}}calculateDigestDuration(){var t=this;try{let e=0;const o=Object.getPrototypeOf(this.rootScope),n=o.$digest;o.$digest=function(){const o=t.getTime();for(var i=arguments.length,s=new Array(i),r=0;r<i;r++)s[r]=arguments[r];n.apply(t.rootScope,s),e=t.getTime()-o,t.digestInfo.duration=e.toFixed(2)}}catch(t){this.logger.error(t)}}getTime(){return performance?performance.now():this.getDate().getTime()}getDate(){return new Date}}r(a,"$inject",["$rootScope","$document","$window","$timeout","$log"]);const c=s.module("angular-stats",[]).service("AngularStats",a).name;return i})());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("angular")):"function"==typeof define&&define.amd?define(["angular"],e):"object"==typeof exports?exports.AngularStats=e(require("angular")):t.AngularStats=e(t.angular)}(self,(t=>(()=>{"use strict";var e={526:e=>{e.exports=t}},o={};function n(t){var i=o[t];if(void 0!==i)return i.exports;var s=o[t]={exports:{}};return e[t](s,s.exports,n),s.exports}n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};return(()=>{n.r(i),n.d(i,{AngularStats:()=>o,angularStats:()=>s});var t=n(526);function e(t,e,o){var n;return(e="symbol"==typeof(n=function(t,e){if("object"!=typeof t||!t)return t;var o=t[Symbol.toPrimitive];if(void 0!==o){var n=o.call(t,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(e))?n:String(n))in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}class o{constructor(t,o,n,i,s){e(this,"rootScope",void 0),e(this,"document",void 0),e(this,"window",void 0),e(this,"timeout",void 0),e(this,"logger",void 0),e(this,"scopesList",void 0),e(this,"watchersList",void 0),e(this,"componentsInfo",void 0),e(this,"domElementsCount",void 0),e(this,"nodeNameList",void 0),e(this,"startingElement",void 0),e(this,"digestInfo",{duration:"0"}),this.rootScope=t,this.document=o,this.window=n,this.timeout=i,this.logger=s,this.startingElement=this.document.find("app")}setStartingElement(t){this.startingElement=t}analyzeWebApp(){if(this.scopesList=[],this.watchersList=[],this.componentsInfo={},this.domElementsCount=0,this.nodeNameList={},!this.startingElement||0===this.startingElement.length)throw Error(this.startingElement+" is not a valid selector");return this.analizeScope(this.rootScope),this.detectFromElement(this.startingElement),this.calculateDigestDuration(),this.composeMessage()}composeMessage(){try{let t="GENERAL\n";t+="----------------------\n",t+="Tot scopes: "+this.scopesList.length+"\n",t+="Tot watchers: "+this.watchersList.length+"\n",t+="Tot DOM Elements: "+this.domElementsCount+"\n",t+="Digest duration: "+this.digestInfo.duration+" ms \n\n",t+="\nCOMPONENTS\n",t+="----------------------\n";for(const e in this.componentsInfo)t+="- "+e+"\ns: "+this.componentsInfo[e].scopesCount+", w: "+this.componentsInfo[e].watchers.length+"\n";t+="\n\nHTMLElement\n",t+="----------------------\n";for(const e in this.nodeNameList)t+=e+": "+this.nodeNameList[e]+"\n";return t}catch(t){return this.logger.error(t),"Error"}}analizeScope(e){try{if(-1===this.scopesList.indexOf(e)){this.scopesList.push(e);const o=e.$ctrl?e.$ctrl.name:e.name?e.name:"Unknown";void 0===this.componentsInfo[o]?this.componentsInfo[o]={name:o,scopesCount:1,watchers:[]}:this.componentsInfo[o].scopesCount++,t.forEach(e.$$watchers,(t=>{-1===this.watchersList.indexOf(t)&&this.watchersList.push(t),-1===this.componentsInfo[o].watchers.indexOf(t)&&this.componentsInfo[o].watchers.push(t)})),e.$$childHead&&this.analizeScope(e.$$childHead),e.$$childTail&&this.analizeScope(e.$$childTail),e.$$prevSibling&&this.analizeScope(e.$$prevSibling),e.$$nextSibling&&this.analizeScope(e.$$nextSibling)}}catch(t){this.logger.error(t)}}detectFromElement(e){try{this.domElementsCount++,t.element(e).scope()&&this.analizeScope(t.element(e).scope()),t.forEach(t.element(e).children(),(e=>{void 0===this.nodeNameList[e.nodeName]?this.nodeNameList[e.nodeName]=1:this.nodeNameList[e.nodeName]++,this.detectFromElement(t.element(e))}))}catch(t){this.logger.error(t)}}calculateDigestDuration(){var t=this;try{let e=0;const o=Object.getPrototypeOf(this.rootScope),n=o.$digest;o.$digest=function(){const o=t.getTime();for(var i=arguments.length,s=new Array(i),r=0;r<i;r++)s[r]=arguments[r];n.apply(t.rootScope,s),e=t.getTime()-o,t.digestInfo.duration=e.toFixed(2)}}catch(t){this.logger.error(t)}}getTime(){return performance?performance.now():this.getDate().getTime()}getDate(){return new Date}}e(o,"$inject",["$rootScope","$document","$window","$timeout","$log"]);const s=t.module("angular-stats",[]).service("AngularStats",o).name})(),i})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,